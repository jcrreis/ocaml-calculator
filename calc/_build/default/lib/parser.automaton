State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On LPAREN shift to state 1
-- On INT shift to state 2
-- On prog shift to state 11
-- On expr shift to state 12
## Reductions:

State 1:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On LPAREN shift to state 1
-- On INT shift to state 2
-- On expr shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS EOF DIV
--   reduce production expr -> INT

State 3:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . DIV expr [ TIMES RPAREN PLUS DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS DIV ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS DIV ]
expr -> LPAREN expr . RPAREN [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On TIMES shift to state 4
-- On RPAREN shift to state 6
-- On PLUS shift to state 7
-- On DIV shift to state 9
## Reductions:

State 4:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On LPAREN shift to state 1
-- On INT shift to state 2
-- On expr shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . DIV expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr TIMES expr . [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS EOF DIV
--   reduce production expr -> expr TIMES expr

State 6:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS EOF DIV
--   reduce production expr -> LPAREN expr RPAREN

State 7:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On LPAREN shift to state 1
-- On INT shift to state 2
-- On expr shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . DIV expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr PLUS expr . [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On TIMES shift to state 4
-- On DIV shift to state 9
## Reductions:
-- On RPAREN PLUS EOF
--   reduce production expr -> expr PLUS expr

State 9:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On LPAREN shift to state 1
-- On INT shift to state 2
-- On expr shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . DIV expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr DIV expr . [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS EOF DIV ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS EOF DIV ]
## Transitions:
-- On TIMES shift to state 4
## Reductions:
-- On RPAREN PLUS EOF DIV
--   reduce production expr -> expr DIV expr

State 11:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 12:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DIV expr [ TIMES PLUS EOF DIV ]
expr -> expr . TIMES expr [ TIMES PLUS EOF DIV ]
expr -> expr . PLUS expr [ TIMES PLUS EOF DIV ]
prog -> expr . EOF [ # ]
## Transitions:
-- On TIMES shift to state 4
-- On PLUS shift to state 7
-- On EOF shift to state 13
-- On DIV shift to state 9
## Reductions:

State 13:
## Known stack suffix:
## expr EOF
## LR(1) items:
prog -> expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> expr EOF

